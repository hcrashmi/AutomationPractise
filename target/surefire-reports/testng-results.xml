<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="2" failed="0" total="2" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="83" started-at="2018-04-26T09:58:59Z" finished-at="2018-04-26T09:58:59Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="83" started-at="2018-04-26T09:58:59Z" finished-at="2018-04-26T09:58:59Z">
      <class name="scripts.DressTest">
        <test-method status="SKIP" signature="preCondition(java.lang.reflect.Method)[pri:0, instance:scripts.DressTest@5cc7c2a6]" name="preCondition" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method status="SKIP" signature="dressTest()[pri:0, instance:scripts.DressTest@5cc7c2a6]" name="dressTest" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dressTest -->
        <test-method status="SKIP" signature="classTest()[pri:0, instance:scripts.DressTest@5cc7c2a6]" name="classTest" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- classTest -->
        <test-method status="SKIP" signature="postCondition(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:scripts.DressTest@5cc7c2a6]" name="postCondition" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method status="SKIP" signature="afterclass()[pri:0, instance:scripts.DressTest@5cc7c2a6]" name="afterclass" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- scripts.DressTest -->
      <class name="scripts.LoginTest">
        <test-method status="PASS" signature="init()[pri:0, instance:scripts.LoginTest@3c09711b]" name="init" is-config="true" duration-ms="454" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="FAIL" signature="classTest()[pri:0, instance:scripts.LoginTest@3c09711b]" name="classTest" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[The driver is not executable: /home/tyss/Desktop/demoExtentrepo/./src/main/resources/driver/geckodriver.exe]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: The driver is not executable: /home/tyss/Desktop/demoExtentrepo/./src/main/resources/driver/geckodriver.exe
	at com.google.common.base.Preconditions.checkState(Preconditions.java:585)
	at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:140)
	at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:131)
	at org.openqa.selenium.firefox.GeckoDriverService.access$100(GeckoDriverService.java:41)
	at org.openqa.selenium.firefox.GeckoDriverService$Builder.findDefaultExecutable(GeckoDriverService.java:141)
	at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:339)
	at org.openqa.selenium.firefox.FirefoxDriver.toExecutor(FirefoxDriver.java:158)
	at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:120)
	at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:98)
	at generic.EXTENTRe.classTest(EXTENTRe.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:514)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:215)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:142)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:178)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- classTest -->
        <test-method status="SKIP" signature="preCondition(java.lang.reflect.Method)[pri:0, instance:scripts.LoginTest@3c09711b]" name="preCondition" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method status="SKIP" signature="postCondition(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:scripts.LoginTest@3c09711b]" name="postCondition" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method status="SKIP" signature="loginToApp()[pri:0, instance:scripts.LoginTest@3c09711b]" name="loginToApp" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToApp -->
        <test-method status="SKIP" signature="afterclass()[pri:0, instance:scripts.LoginTest@3c09711b]" name="afterclass" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
        <test-method status="SKIP" signature="end()[pri:0, instance:scripts.LoginTest@3c09711b]" name="end" is-config="true" duration-ms="0" started-at="2018-04-26T15:28:59Z" finished-at="2018-04-26T15:28:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- end -->
      </class> <!-- scripts.LoginTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
